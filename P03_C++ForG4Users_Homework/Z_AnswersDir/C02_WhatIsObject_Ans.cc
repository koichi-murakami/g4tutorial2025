//******************************************************************************
// オブジェクトとは？：　C02_WhatIsObject.cc: 
//******************************************************************************
// [自習の進め方]
//    1) 以下のプログラムに書かれたコメントを順次読む
//    2) コメント部分に[問]と書かれた行では、そこに書かれた指示に従い、'?'文字部分を
//       正しい文に置き換える。直前の行は例文で、これを参考に答えを書く
//    3) 全ての[問]に回答を終了したら、以下のc++コマンドを実行する
//         % c++ C02_WhatIsObject.cc
//       　　　　　[注]　使用c++のversionが古い場合、'-std=c++11'のオプションをつける
//    4) コンパイラ エラーが生じたら、エラー情報からコードを修正する
//    5) エラーが無くなり、実行ファイル（a.out）が作られたら、それを以下のように実行
//         % a.out
//       実行すると、"!!! 自習プログラム完了 !!!"のメッセージが出る
//    6) 適当なデバッグ文をコード中に挿入、各文の動作をチェックすることを薦める
//
//    (注)　自習問題の解答は以下のファイルにある：
//           ../Z_AnswersDir/C02_WhatIsObject_Ans.cc
//******************************************************************************

#include <iostream>
#include <string>
#include <vector>
#include <complex>
using namespace std;


//------------------------------------------------------------------------------
// [課題 1]  built-inタイプ(int, double, char, 等）のオブジェクトの作成方法
//------------------------------------------------------------------------------

int main() {

// intタイプの変数を作り初期化する - 多くのプログラム言語で共通のスタイルを使う
  int eVal = 5;                      // intオブジェクトの作成
  int mVal = 7;                      // [問] 上例と同じタイプの変数を作り初期化せよ

// intタイプのオブジェクトを作り初期化する - ()の代わりに{}でもOK
  int eOb1( 5 );                     // intオブジェクトの作成
  int mOb1( 7 );                     // [問] 上例と同じタイプのオブジェクトを作り初期化せよ

// doubleタイプのオブジェクトを作り初期化する - ()の代わりに{}でもOK
  double eOb2{ 3.14 };               // doubleオブジェクトの作成
  double mOb2( 2.71 );               // [問] 上例と同じタイプのオブジェクトを作り初期化せよ

//------------------------------------------------------------------------------
// [課題 2]  標準ライブラリ(C++ Standard Library)提供のタイプのオブジェクト作成方法
//------------------------------------------------------------------------------

// stringタイプのオブジェクトを作り初期化
  string eOb3{ "Hello World!" };      // stringオブジェクトの作成
  string mOb3{ "Hello Geant4" };      // [問] 上例と同じタイプのオブジェクトを作り初期化せよ

  //--- stringタイプが持つmember関数 "length()"を使用し、データの文字数を取得する
  int eOb3_Leng = eOb3.length();      // member関数の使い方
  int mOb3_Leng = mOb3.length();      // [問] 上例と同じ情報を取得せよ

// vectorタイプのオブジェクトを作り初期化 (doubleの要素を持つ)
  vector<double> eOb4{ 1.23, 4.56 };  // vectorオブジェクトの作成
  vector<double> mOb4{ 9.87, 6.54 };  // [問] 上例と同じタイプのオブジェクトを作り初期化せよ

  //--- vectorタイプが持つmember関数 "size()"を使用し、全要素の数を取得する
  int eOb4_Size = eOb4.size();        // member関数の使い方
  int mOb4_Size = mOb4.size();        // [問] 上例と同じ情報を取得せよ

  //--- vectorタイプが持つmember関数 "at()"を使用し、２番目の要素のデータを取得
  double eDat = eOb4.at(1);           // member関数の使い方
  double mDat = mOb4.at(1);           // [問] 上例と同じ情報を取得せよ

//------------------------------------------------------------------------------
// [課題 3]  '&演算子'を使ったオブジェクトのポインタ取得、及び'*演算子'の使用方法
//------------------------------------------------------------------------------

// この課題で使うオブジェクトを初期設定
  int ei = 123;                                             // intオブジェクトの作成
  int mi = 123;                                             // intオブジェクトの作成
  vector<double> evec = vector<double>{ 5.67, 6.78, 7.89 }; // vectorオブジェクトの作成
  vector<double> mvec = vector<double>{ 5.67, 6.78, 7.89 }; // vectorオブジェクトの作成


// "&演算子"を使い、上のオブジェクトへのポインタ(ポインタ・タイプのオブジェクト)を作成する
  int* eip = &ei;                    // intオブジェクトへのポインタ作成
  int* mip = &mi;                    // [問] 上例と同じタイプのオブジェクトを作成

  vector<double>*  evecp = &evec;    // vectorオブジェクトへのポインタ作成
  vector<double>*  mvecp = &mvec;    // [問] 上例と同じタイプのオブジェクトを作成

// "*演算子"を使い、ポインタが指すオブジェクトを取得する - dereferencing
  int ej = *eip;                     // intオブジェクトへのポインタからintオブジェクトを取得
  int mj = *mip;                     // [問] 上例と同じタイプのオブジェクトを作成

  vector<double> evecc = *evecp;     // vectorオブジェクトへのポインタからvectorオブジェクトを取得
  vector<double> mvecc = *mvecp;     // [問] 上例と同じタイプのオブジェクトを作成

// ポインタが指すオブジェクトのmember関数を使う
  int evecp_Size = evecp->size();    // vectorタイプの関数 "size()"を使い、要素の総数を取得
  int mvecp_Size = mvecp->size();    // [問] 上例と同じように関数を使う

  double evecp_At = evecp->at(1);    // vectorタイプの関数 "at()"を使い、2番目要素の値を取得    
  double mvecp_At = mvecp->at(1);    // [問] 上例と同じように関数を使う    

  double evec_At = evec.at(1);       // ポインタからでなく直接オブジェクトから関数"at()"を使う場合    
  double mvec_At = mvec.at(1);       // [問] 上例と同じように関数を使う    


//------------------------------------------------------------------------------
// [課題 4]  レファレンスの使用方法
//------------------------------------------------------------------------------

// この課題で使うオブジェクトを初期設定
  int ek = 456;                    // 'int'オブジェクトの作成
  int mk = 456;                    // 'int'オブジェクトの作成

// 上のintegerオブジェクトのレファレンス(レファレンス・タイプのオブジェクト)を作成する 
  int& ekr = ek;                   // 'int'タイプのレファレンス・オブジェクトを作成 
  int& mkr = mk;                   // [問] 上例と同じように'int'タイプのレファレンスを作成   


//******************************************************************************
// 自習プログラム 終了メッセージ
  cout << "!!! 自習プログラム完了 !!!" << endl;
//******************************************************************************


//******************************************************************************
// デバッグ文の作成例
//******************************************************************************
  //--- built-inタイプ
  cout << "mVal: " << mVal << endl; 
  cout << "mOb1: " << mOb1 << ", mOb2: " << mOb2 << endl; 

  //--- stringタイプ
  cout << "mOb3: " << mOb3 << endl;
  cout << "mOb3 (Length): " << mOb3_Leng << endl; 

  //--- vectorタイプ
  cout << "mOb4 (Size): " << mOb4_Size << endl;
  cout << "mOb4(1): " << mDat << endl;

}
