//******************************************************************************
// オブジェクト生成と存続期間：　C04_ObjectLifetime 
//******************************************************************************
// [自習の進め方]
//    1) このファイルは変更なしでc++実行可能となっている。自習の最初に以下のコマンドで
//       実行し、その結果が端末で見えるようにしておく。
//         % c++ C04_ObjectLifetime.cc
//       　　　　　[注]　使用c++のversionが古い場合、'-std=c++11'のオプションをつける
//         % a.out
//    2) 次に、以下のプログラムに書かれたコメントを順次読み、[問]の部分の回答を考える。
//       その際、上のステップで出力した結果を参照する。
//******************************************************************************

#include <iostream>
#include <vector>
using namespace std;


//------------------------------------------------------------------------------
// [課題 1] オブジェクト渡しを使う
//    [問] 以下の関数'PassValue()'は、渡されたオブジェクトに定数'10'を加える。
//         この関数を実行しても、元のオブジェクトが変化しないこと確かめよ。
//
//        （注） 関数は渡されたオブジェクトのコピーをブロック内で作る。そして、この
//              ローカル・オブジェクトに対して定数'10'を加える。ローカル・オブジェクトは
//              関数ブロックが終了すると消失し、関数外にある元のオブジェクトは不変。
//------------------------------------------------------------------------------

void  PassValue( float  val ) { 
  val  += 10;       // valはコピーされたオブジェクト；　'10'を加算
}

//------------------------------------------------------------------------------
// [課題 2] ポインタ渡しを使う
//    [問] 以下の関数'PassPoint()'は、ポインターで渡されたオブジェクトに定数'20'を加える。
//         この関数を実行すると、元のオブジェクトも変化していること確かめよ。
//------------------------------------------------------------------------------

void  PassPointer( float* val ) { 
  *val += 20;       // valはポインター：　dereferencingしてから'20'を加算
} 

//------------------------------------------------------------------------------
// [課題 3] リファレンス渡しを使う
//    [問] 以下の関数'PassReference()'は、レファレンスで渡されたオブジェクトに定数'30'を
//         加える。この関数を実行すると、元のオブジェクトも変化していること確かめよ。
//------------------------------------------------------------------------------

void  PassReference( float& val ) { 
  val  += 30;       // valはレファレンス：　オブジェクトに直接'30'を加算 
}

//------------------------------------------------------------------------------
// [課題 4] 返り値渡しを使う
//    [問] 以下の関数'PassReturn()'は、渡されたオブジェクトに定数'40'を加える。そして加算
//         されたオブジェクトを'return'で返す。これで'RVO:Return Value Optimization'が
//         作動。この関数を実行すると、関数外の元のオブジェクトも変化していること確かめよ。
//------------------------------------------------------------------------------

float PassReturn( float  val ) { 
  return val += 40;  // valは'RVO'でreturnされる：　ローカル・オブジェクトに'40'を加算 
}



//------------------------------------------------------------------------------
// 以上で課題は終了　ー　以下は課題 1~4の[問]へ解答する際に参照する関数の実行プログラム　
//------------------------------------------------------------------------------

int main() {

  float value = 1.23;
  cout << "関数実行前のvalue          : " << value << endl;

  PassValue( value );                     // 値渡しの関数を使う
  cout << "PassValue実行後のvalue     : " << value << endl;

  PassPointer( &value );                  // ポインター渡しの関数を使う
  cout << "PassPointer実行後のvalue   : " << value << endl;

  PassReference( value );                  // レファレンス渡しの関数を使う
  cout << "PassReference実行後のvalue : " << value << endl;

  value = PassReturn( value );             // 返り値渡しの関数を使う
  cout << "PassReturn実行後のvalue    : " << value << endl;

}


